"#id";"rule";"action";"description"
1;"currentSegment == null && ctx.featureInMax";"processNoise";"Current not initialized. Found max, but there is no min. skip it"
2;"currentSegment == null";"initSegment";"Current not initialized. This first segment"
3;"ctx.featureStable && currentSegment == null";"processNoise";"initial noise"
4;"ctx.featureStable && stableLength <20";"processSignal";"waiting for decision if this part of signal"
5;"ctx.featureStable && stableLength >20 && currentPeakCount > 0";"changePoint";"this is part of noise"
6;"ctx.featureStable && stableLength >20 ";"processNoise";"this is part of noise"
7a;"ctx.featureInMin && "smooth_SIGNAL_ENTROPY_EXTRACTOR".equals(ctx.extractorName) &&  ctx.previousValue > 4E5";"processSignal";"processSignal"
7b;"ctx.featureInMin && ctx.previousValue > 1E6";"processSignal";"processSignal"
7c;"ctx.featureInMin && ctx.previousValue > 1E6";"processSignal";"processSignal"
7d;"ctx.featureInMin && ctx.previousValue > 1E6";"processSignal";"processSignal"
7;"ctx.featureInMin";"changePoint";"change point"
8;"ctx.featureInMax && lastLength < 100 ";"join";"too small last"
#"8";"lastSegment != null && (lastSegment.startEntry.value - currentSegment.startEntry.value>currentSegment.startEntry.value*10)";"join";"Found max. join as M"
10;"ctx.featureInMax && isIncrease && distanceBetweenPaeks<190";"join";"Found max. join as increase"
11;"ctx.featureInMax && isDecrease && distanceBetweenPaeks<190";"join";"Found max. join as decrease"
11a;"ctx.featureInMax && distanceBetweenPaeks<40";"join";"Found max. join as between peaks not enough space"
#12;"ctx.featureInMax && ""0"".equals(className) && lastSegment.start > 100 ";"delete";"too small last"
13;"lastSegment != null && ctx.featureInMax && lastSegment.start < 100";"delete";"remove initial"
14;"ctx.featureInMax";"changePointLastApproved";"Found max. approve previous change point"
15;"true";"processSignal";"Rule not match"
