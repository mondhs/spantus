/*
 * Part of program for analyze speech signal 
 * Copyright (c) 2008 Mindaugas Greibus (spantus@gmail.com)
 * http://spantus.sourceforge.net
 * 
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 675 Mass Ave, Cambridge, MA 02139, USA.
 * 
 */
package org.spantus.exp.segment.services.impl;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.MessageFormat;

import org.spantus.exception.ProcessingException;
import org.spantus.exp.segment.beans.ComparisionResult;
import org.spantus.exp.segment.domain.ExperimentResult;
import org.spantus.exp.segment.domain.ExperimentResultTia;

public class ExperimentHsqlTiaDao extends ExperimentStaticDao{
	Connection connection = null;
	Statement statement = null;

	
	
	public ExperimentHsqlTiaDao() {
	}
	
	protected String getInsertExperimentResulQuery(){
		String insertQuery = 
			"INSERT INTO ExperimentResult" +
			"(experimentID, RESOURCE, FEATURES, TOTALRESULT, S_ONSET, S_STEADY, S_OFFSET, S_DELTAVAF, FEATURENUM) VALUES" +
			"({0,number,#}, ''{1}'', ''{2}'', {3,number}, {4,number},{5,number}, {6,number}, {7,number}, " +
			"{8,number});"; 
		return insertQuery;
	}
	
	@Override
	public void init(){
		try {
			Class.forName("org.hsqldb.jdbcDriver").newInstance();

			String url = "jdbc:hsqldb:hsql://localhost/spnt-exp";
			connection = DriverManager.getConnection(url, "sa", "");
			connection.setAutoCommit(true);
			
			statement = connection.createStatement();
			String query ="DROP TABLE ExperimentResult IF EXISTS;"+

"CREATE CACHED TABLE ExperimentResult("+ 
"id BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,"+
//"experimentDate DATE NOT NULL,"+
"experimentID BIGINT NOT NULL,"+
"resource VARCHAR NOT NULL,"+ 
"features VARCHAR NOT NULL,"+
"totalResult FLOAT NOT NULL,"+
"S_ONSET FLOAT,"+
"S_STEADY FLOAT,"+
"S_OFFSET FLOAT,"+
"S_DELTAVAF FLOAT,"+
"FEATURENUM INT"+
");"+
"CREATE INDEX feature_idx on EXPERIMENTRESULT(TOTALRESULT)"; 
			statement.executeUpdate(query);
			connection.commit();
			

		} catch (InstantiationException e) {
			destroy();
			throw new ProcessingException(e);
		} catch (IllegalAccessException e) {
			destroy();
			throw new ProcessingException(e);
		} catch (ClassNotFoundException e) {
			destroy();
			throw new ProcessingException(e);
		} catch (SQLException e) {
			destroy();	
			throw new ProcessingException(e);
		}
	}

	@Override
	public ExperimentResult save(ComparisionResult comparisionResult,
			String features, Long experimentID, String experimentName) {
		return save(createExperimentResult(comparisionResult, features, experimentID, experimentName) );
	}
	
	@Override
	public ExperimentResult save(ExperimentResult experimentResult) {
		if(experimentResult.getTotalResult() >= 1 ) return experimentResult;
		try {
			ExperimentResultTia result = (ExperimentResultTia)experimentResult;
			int featureNum = result.getFeatures().split(" ").length;
			statement = connection.createStatement();
			String query = 
				MessageFormat.format(
						getInsertExperimentResulQuery(),
						result.getExperimentID(),
						result.getResource(),
						result.getFeatures(),
						result.getTotalResult(),
						result.getOnset(),
						result.getSteady(),
						result.getOffset(),
						result.getDeltaVAF(),
						featureNum);
			statement.executeUpdate(query);
			connection.commit();
		} catch (SQLException e) {
			destroy();
			throw new ProcessingException(e);
		}
		return experimentResult;
	}

	public void destroy() {
		try {
			connection.commit();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (statement != null) {
				try {
					statement.close();
				} catch (SQLException e) {
				} // nothing we can do
			}
			if (connection != null) {
				try {
					connection.close();
				} catch (SQLException e) {
				} // nothing we can do
			}
		}
	}

}
