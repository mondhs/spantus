package org.spantus.exp.recognition.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.MessageFormat;

import org.spantus.exception.ProcessingException;
import org.spantus.exp.recognition.domain.QSegmentExp;
import org.spantus.exp.segment.domain.ExperimentResult;
import org.spantus.exp.segment.domain.ExperimentResultTia;

public class QSegmentExpHsqlDao implements QSegmentExpDao {
	Connection connection = null;
	Statement statement = null;
	boolean recreate = false;

	public void init() {
		try {
			Class.forName("org.hsqldb.jdbcDriver").newInstance();

			String url = "jdbc:hsqldb:hsql://localhost/spnt-exp";
			connection = DriverManager.getConnection(url, "sa", "");
			connection.setAutoCommit(true);

			statement = connection.createStatement();
			if (recreate) {
				String query = "DROP TABLE QSegmentExp IF EXISTS;"
						+

						"CREATE CACHED TABLE QSegmentExp("
						+ "id BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,"
						+ "length BIGINT,"
						+ "start BIGINT,"
						+ "wavFilePath VARCHAR(255) NOT NULL,"
						+ "markerLabel VARCHAR(255) NOT NULL,"
						+ "corpusEntryName VARCHAR(255) NOT NULL,"
						+ "manualName VARCHAR(255) NOT NULL,"
						+ "proceessTime BIGINT," 
						+ "loudnessLabel VARCHAR(255) NOT NULL," + "loudness FLOAT,"
						+ "spectralFluxLabel VARCHAR(255) NOT NULL," + "spectralFlux FLOAT," 
						+  "plpLabel VARCHAR(255) NOT NULL,"+ "plp FLOAT," 
						+  "lpcLabel VARCHAR(255) NOT NULL,"+ "lpc FLOAT,"
						+  "mfccLabel VARCHAR(255) NOT NULL,"+ "mfcc FLOAT," 
						+  "signalEntropyLabel VARCHAR(255) NOT NULL,"+ "signalEntropy FLOAT," 
						+ "timeStamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP"+ ");"
				// + "CREATE INDEX feature_idx on QSegmentExp(TOTALRESULT)"
				;
				statement.executeUpdate(query);
				connection.commit();
			}

		} catch (InstantiationException e) {
			destroy();
			throw new ProcessingException(e);
		} catch (IllegalAccessException e) {
			destroy();
			throw new ProcessingException(e);
		} catch (ClassNotFoundException e) {
			destroy();
			throw new ProcessingException(e);
		} catch (SQLException e) {
			destroy();
			throw new ProcessingException(e);
		}
	}

	protected String getInsertExperimentResulQuery() {
		String insertQuery = "INSERT INTO QSegmentExp"
				+ "(wavFilePath, start, length, markerLabel, corpusEntryName, manualName ,proceessTime,loudnessLabel, loudness, spectralFluxLabel, spectralFlux,plpLabel, plp, lpcLabel, lpc, mfccLabel, mfcc, signalEntropyLabel,  signalEntropy) VALUES"
				+ "(''{0}'',  {1,number,#}, {2,number,#},''{3}'', ''{4}'', ''{5}'', {6,number,#}, " +
						"''{7}'', {8,number,#.#}," +
						"''{9}'', {10,number,#.#}," +
						"''{11}'', {12,number,#.#}, " +
						"''{13}'',{14,number,#.#}, " +
						"''{15}'',{16,number,#.#}, " +
						"''{17}'',{18,number,#.#}" +
						");";
		return insertQuery;
	}

	public QSegmentExp save(QSegmentExp exp) {
		String query = MessageFormat.format(
				getInsertExperimentResulQuery(),
				exp.getWavFilePath(),exp.getStart(), exp.getLength(),
				exp.getMarkerLabel(), exp.getCorpusEntryName(),
				exp.getManualName(), exp.getProceessTime(),
				exp.getLoudnessLabel(), exp.getLoudness(),
				exp.getSpectralFluxLabel(), exp.getSpectralFlux(),
				exp.getPlpLabel(),  exp.getPlp(), 
				exp.getLpcLabel(), exp.getLpc(), 
				exp.getMfccLabel(), exp.getMfcc(), 
				exp.getSignalEntropyLabel(), exp.getSignalEntropy(), exp.getTimeStamp());
		try {
			statement = connection.createStatement();
			statement.executeUpdate(query);
			connection.commit();
		} catch (SQLException e) {
			destroy();
			throw new ProcessingException(e);
		}
		return exp;
	}

	public void destroy() {
		try {
			if(!connection.isClosed()){
				connection.commit();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (statement != null) {
				try {
					statement.close();
				} catch (SQLException e) {
				} // nothing we can do
			}
			if (connection != null) {
				try {
					connection.close();
				} catch (SQLException e) {
				} // nothing we can do
			}
		}
	}

	public boolean isRecreate() {
		return recreate;
	}

	public void setRecreate(boolean recreate) {
		this.recreate = recreate;
	}

}
