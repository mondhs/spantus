/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.spantus.extr.wordspot.util.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.MessageFormat;
import java.util.Map.Entry;
import org.spantus.core.beans.RecognitionResult;
import org.spantus.core.beans.SignalSegment;
import org.spantus.exception.ProcessingException;
import org.spantus.extractor.impl.ExtractorEnum;

/**
 *
 * @author mondhs
 */
public class WspotJdbcDao {

    Connection connection = null;
    Statement statement = null;
    boolean recreate = false;

    public void init() {
        try {
            Class.forName("org.hsqldb.jdbcDriver").newInstance();

            String url = "jdbc:hsqldb:hsql://localhost/spnt-exp";
            connection = DriverManager.getConnection(url, "sa", "");
            connection.setAutoCommit(true);

            statement = connection.createStatement();
            if (recreate) {
                String query = "DROP TABLE WordSpotExp IF EXISTS;"
                        + "CREATE CACHED TABLE WordSpotExp("
                        + "id BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,"
                        + "fileName VARCHAR(255) NOT NULL,"
//                        + "proccessingLength BIGINT, "
//                        + "experimentStarted BIGINT,"
//                        + "experimentEnded  BIGINT,"
//                        + "audioLength  BIGINT,"
//                        + "markerLabel VARCHAR(255),"
                        + "markerStart BIGINT,"
                        + "markerEnd BIGINT,"
                        + "foundStart BIGINT,"
                        + "foundEnd BIGINT,"
                        + "mfccVaue FLOAT);"
                        + "\n"
                        + "DROP TABLE WordSpotSampleExp IF EXISTS;"
                        + "CREATE CACHED TABLE WordSpotSampleExp("
                        + "id BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,"
                        + "fileName VARCHAR(255) NOT NULL,"
                        + "proccessingLength BIGINT, "
                        + "experimentStarted BIGINT,"
                        + "experimentEnded  BIGINT,"
                        + "audioLength  BIGINT,"
                        + "markerLabel VARCHAR(255) NOT NULL,"
                        + "markerStart BIGINT,"
                        + "markerEnd BIGINT,"
//                        + "foundStart BIGINT,"
//                        + "foundEnd BIGINT,"
//                        + "mfccVaue FLOAT"
                        + ");";
                statement.executeUpdate(query);
                connection.commit();
            }

        } catch (InstantiationException | IllegalAccessException | ClassNotFoundException | SQLException e) {
            destroy();
            throw new ProcessingException(e);
        }
    }

    public void save(WordSpotResult result) {
//        Entry<RecognitionResult, SignalSegment> recognitionResultEntry = result.getSegments().entrySet().iterator().next();

        String fileName = result.getFileName();
        long proccessinglength = result.getExperimentEnded() - result.getExperimentStarted();
        long experimentStarted = result.getExperimentStarted();
        long experimentEnded = result.getExperimentEnded();
        long audioLength = result.getAudioLength();
        String markerLabel = result.getOriginalMarker().getLabel();
        Long markerStart = result.getOriginalMarker().getStart();
        Long markerEnd = result.getOriginalMarker().getEnd();
        markerLabel = markerLabel.replaceAll("[\'|-]", "");

        String insertWordSpotSampleExpQuery = "INSERT INTO WordSpotSampleExp ("
                + "FILENAME,proccessinglength,EXPERIMENTSTARTED,EXPERIMENTENDED,AUDIOLENGTH,MARKERLABEL,MARKERSTART,MARKEREND) VALUES "
                + "(''{0}'' ,{1,number,#},{2,number,#},{3,number,#},{4,number,#}, ''{5}'' ,{6,number,#},"
                + "{7,number,#});";

        String queryWordSpotSampleExp = MessageFormat.format(insertWordSpotSampleExpQuery,
                fileName,
                proccessinglength, experimentStarted, experimentEnded,
                audioLength, markerLabel, markerStart, markerEnd);

        insert(queryWordSpotSampleExp);

        for (Entry<RecognitionResult, SignalSegment> recognitionResultEntry : result.getSegments().entrySet()) {

            RecognitionResult recognitionResult = recognitionResultEntry.getKey();
            SignalSegment signalSegment = recognitionResultEntry.getValue();


            Long foundStart = signalSegment.getMarker().getStart();
            Long foundEnd = signalSegment.getMarker().getEnd();
            Double mfccVaue = recognitionResult.getDetails().getDistances().get(ExtractorEnum.MFCC_EXTRACTOR.name());





            String insertQuery = "INSERT INTO WORDSPOTEXP (FILENAME,MARKERSTART,MARKEREND,FOUNDSTART,FOUNDEND,MFCCVAUE) VALUES "
                    + "(''{0}'' ,{6,number,#},"
                    + "{7,number,#},{8,number,#},{9,number,#},{10,number,#.###});";

            String queryWORDSPOTEXP = MessageFormat.format(insertQuery,
                    fileName,
                    proccessinglength, experimentStarted, experimentEnded,
                    audioLength, markerLabel, markerStart, markerEnd, foundStart, foundEnd, mfccVaue);
            insert(queryWORDSPOTEXP);
        }
    }

    public void insert(String query) {
        try {
            statement = connection.createStatement();
            statement.executeUpdate(query);
            connection.commit();
        } catch (SQLException e) {
            destroy();
            throw new ProcessingException(e);
        }
    }

    public void destroy() {
        try {
            if (!connection.isClosed()) {
                connection.commit();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                } // nothing we can do
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                } // nothing we can do
            }
        }

    }

    public boolean isRecreate() {
        return recreate;
    }

    public void setRecreate(boolean recreate) {
        this.recreate = recreate;
    }
}
